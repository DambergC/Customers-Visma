<File version="3.2">
  <FileID>1ec6c03f-2875-4a4f-b7c9-1b5511ff38e9</FileID>
  <Preview>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
TkSuQmCC</Preview>
  <Form>Siuw1/wKbg4AACODCAAAAAAABADVVltzqjoUfnfG/8DwWqcg3mesM4CorTcQpNv9sgchhSgQ5VLFX78TaM9x
b1F86ZmediYmJCtrre/L+pLufL0BZhT2yiWK6mYDKkp24IlWkzAC3uMr9C10CB8HKPCytkLlTVUo
HQQhRP5T/ZEl/xVKjN0oDsCTD+IoMNwKJcdrF5pjkGhoC/yndatlNMxGs9qp1QHb7tCUb3jY8xve
T4ehZ8h4R+QDs29Ehoh2NGU60LUCbEqLyI8C5IZ0GjmOXQ7QDgRR8rEHH0dINQ0X9KEHfBIXXtqs
UNVal/lcWmQ6RRagewPsqdBGdCHwIxWesEG71qhQtXqr0GiGW7p3LdtCczUygkhGIYxwdnRPxAGA
QDUDAPxCWw0cI7qXuqU+/VLEMYU9J5SGkHu5h/SOXXxsMEGGdT32X2S6y6QGn9bFh2sK/FiNArj7
8hOGj0QcEk+aAzAHN87VJXTPnmEDcj6gb2eEczgSjr3AK8cU53S2M15AvtyChBCRQkKwIYu/Dpqz
sHBgC/AGMCAm+Ag9IkBdRENTzHk2DPn2b/bFgEyQaWSnF0d8D4JZyfxJ3x1msmFZmC66hyuTw55w
e4eV6qADyYikrcEdZk4L4nvcnekA175jvWasn30LHOletX7P8rR4/wGhelmpTFZsmar/MSiuwv/w
yN0+W9fk2YW2j5PHECyg7RRrcx8P++jg/1V937T2LirPMoLtzcL7u+z+J3m5hLz7EyukOdXlM3oF
6BtB0oO6MF8c2PHQRjz+m6lLR1rauCeQIa+I/Ir8vrWZjkM6wtAStKXE85OhLDJHR1DIV/egDtxT
uYS783fc9IOD4K6PiUpmBYdd6A675DqeNbIc01vy5nCwW/tKvPZ09rmvxFO1Xv0pWavU83j3spAG
y3JpLnU2DzLDyOxypex54aG5i6QHdj97b/P1947CTLkHwwsZXUDzKZ8c9p3THu6Vl0HL6I+3ZpUf
b34OVxEcjeCkXJoZK+FV+AGP0B7OZ1rYDF89UWgPHXc6qvG83TiF3ELRDnNO6Yfi1oZjd88PdWCO
N1Zt1RnweiP80WItaWXj2BbJ9JmX2K0MB/o61KeqKPCuONRfOc5JNtLM5ocjzmU1Wxm1+KPSWsoH
y51Bm/UxyHWhzby0BX78Up3NRKNcaq7ZU4q35A60rRornih2mQ+K7iQ40/58sSh+LKWSXMPiz11K
7IXAZoKf6WzeHfP9NTVfNW4im2tyJ7DVBkH28lLNv7r62NPt5yV+T5vbKyH9SifPX5ffn44rYneT
j3ybLyFkkn+R5jCSH9RNSj67Ye83Tf1Pjm4OAAA=</Form>
  <Code><![CDATA[
$formVismaPersonecDataCop_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme $formVismaPersonecDataCop -Theme Dark
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formVismaPersonecDataCop -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formVismaPersonecDataCop -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
			if ($target.ContextMenuStrip)
			{
				$Queue.Enqueue($target.ContextMenuStrip);
			}
		}
	}
}
#endregion
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>