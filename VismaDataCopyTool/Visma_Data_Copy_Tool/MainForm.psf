<File version="3.2">
  <FileID>1ec6c03f-2875-4a4f-b7c9-1b5511ff38e9</FileID>
  <Preview>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
vUP5dVdf5qFS7cuw5+TW0X90mW3Dx1VQ2RG9XJ9d3qakDe1mO2JPue+Ls9x1uu/gP5CbtMsqiS7D
fenijUMlOpxfG31zX5Odpsku153HXb47YD1W1KTqNvdv/+1gzx4H9+r1+PL7178AzJy4oA4b5F0T
NrAs90ME2odmVZdqVUNrt1LNLTqcV6N7X0jonqfL9Nxb5WpIpZTqGLBBubZxPhtQ0a/rl9O5+We7
ge0j87aZHFeXHaWvn8a9f/3X9ey07n12pOs+cFfefnWddlnudN12evdSfXRUfPl9dpRsb3OLjLv9
7sFotz9Hi4m7bDvvldOu38euzfOMLtn9sIE9umCX6V5K2nKdY7ZdupeXNi6zyz3IdkTtrmf9NHb/
7M/usjvd2+2yovO5otvrzudu79z6Y2CPj7s97jFxG1/f/IoS5eXKT/ZHr6J02e3osqWrPFGtRMd0
9Em99bFyj+v67bfFy25vdNvdY3L5/tgm7H6/cRs2z0dEdCvXN7OmstSg8iraNTh/2p4n7blzoy6r
f/aMBhfO2fuurnf6ZPScuvX0fTMnlWwZib7+7xYAtwz0z5666jRdE6samDsbe5k9Nhe3Xqa7/kE7
sHP/tNAtAO6fFjbYsO+xA1v3PtfmXBqcX7/MHrtd7ra53w/YZa4/x9t9ddkccacfssvMLG5Wdfu4
nfbK8/7kygefYgFYubAxqNaHU5Q7sreh5RaBdvu1Z2xew9PzGplZ0MCkDR57e5fbuq4539V/dr9f
tQdjvStvW/9187SXf9043bWX0XP591vedvl0Wy7vmuu5+rK2vH3j95un37z8q8+/5TK2nOajrif+
tB9/HvdJ0juzonpbtKrapuz3p+2DeEI1NTUqTPaoa/pU/GVt/P7qy4y5P3bazfcREd3K9dkwdS+L
H8lvtIHdr4Qd2bvBfSMlGgejf07ojsLdN9tlFKY+4+WtX+aRglT0En5pw6CySlqit8Wd/nort+XE
3V/36oH7t//ucXAHyVOrl2wByLq+BWB25X07s20bbiBZ0WByRRvIqY/OzuNOS5+hyTXbNk/ZJ689
ltFisP64u7dtfiyIiOiTWo2O3N3X2933axXV9t1whXb+ypZRey6252d7Pq5uG//Ml+nO75YJ92/0
3XO9+yeJ7nriTnu9ufM39s5F99s9BpszY2ZNn2IBWH3/8hByuTu9PvyJbpbc5ywRpXsDc6ejfwY3
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
K1RcVKSyRL0Gx2c1ZUN6YuJjsvONjQypt2/Qfu/+PKWFuVl11trllFWoa3xCs264x513YkpTE2Nq
qKtR7+iM5menNG6njzutu41uWWEBILq+ti4A7u8QgO3lvgkwyAVgbn5RrYUv64v//Yv6/l136St/
+Td64Belml9eir6RaGlhLnoSmVk4Hv15cW7a/jyppdUzGqzP0O77X9OIPdkcn59Rybsv6Ot/9S19
/9t/rzvvfd6WgEWdOHFCS4vztlDYddnpluwy1s6sqj3viL77tW/p+YOFauka0sLx5Y3rm9UkCwDR
DccCAIQl4AVgXslje7Xnqdzoho7XH9Cd3/ypBhb6lHPgHWVUtmjWhntT8THte+ddlTYM6PjilOpK
j+q5n+zUbTtf0cTyCU11V+nH3/mBsjoXdHZpRqmyOg2O9Cr/8Fs6UFStselhNVSW6eC+d1RUU6On
7rxN3737ReWXFquhfVDdDXl64823dCyR0tjk1OUlgAWA6NPFAgCEJdwFYGFRLfkv6Qv/+U90+x3f
11/+9Vf16pEKHXrqDv3fr/6t/vQr/6D9pW2qO/qcbvvaX+qvvveccg49o7vv+Dvd/u2v6os79mpm
zW505bu68569Gl9ciI72T6wtKf/lH+r2792mr99xh3726tP62hf/Vvfdt1Pf/tq39X/+15/r67ff
r8d/9rReefklPbjzK9q1+/v6k68/pOaRqctfPmABIPp0sQAAYQn4FYAF1Wfv1Xfv+KlqG6v09M4f
6bHX9+lb/+UPdduuPdr9g+/pqVfe0us/fVL333+3vvzXX9d3vrdDB6sndbyvQHft/oXGllc01Jil
HXc+oq4Fu56VNa1NN2rn7T9Ww+SaWnJe1m1/f7t2PPSWTl6Y1VuP3a87fvSgDuZX6ODeJ/Xtb31P
j79dK13s1/07nlB9//j6NweyABB96lgAgLAE/ArAvKqPPq+79ryt5YsXNFB7RHfetkN7fvhdPfvy
O9p34KD2vfKivvtnO3XowGv6q6/u0ONP7NKP73tIzz78HX359qc0sbys41ODeuG+7+v7D7yuzH2v
6Wd7ntKj/+92Pfb0U3pgz27d8+D9uue+17W4Mqhn9/xYf/+Nu7R3f7ZeefpxPfTwg9q1yy7/rafs
7XvUODzNAkB0g7EAAGEJdgFwdacqlZVfo6n5OY0PtKk4u1CtLQk9fu8OPfBqhnpHJ1Xw8jPatXOn
Htmbpf7hdr326L3a9dAeHciu1uTsjKZn5jTZ36HXH75PO3fs1ruFzZoerNbTD92tB186ZgM8pazs
Kk3PjSpRkKcjR7JVXd+iyrJSNdmA3/+ze/XXX/oj/fvbHlXv+BwLANENxgIAhCXYBWBifFxTNrwX
F2aj30+4nwmwuKCZ2TmtuJ9dvOS+pj+pheUTdiPtz8uLmp6a0ZJ7mX91TccX56LzuZ8uODltb7fr
cKdbnJ/R5NScTqzaHXbnmZ6167AFY3wy+tcAx48vas4Wh4WlZc30d+rpPffozjvu1guFjZqZufIv
AVgAiD5dLABAWIJaANxPAnQ/XMf9uFD3g3a2Mzfg3a8Li4s6vrSk5UW7Tfa2aVsm3NvdbXQ/R5kF
gOj6YgEAwhLUAuD+JyGlpaXRjwO+9ufuh5a7jWVlZdHSwgJA9MmxAABhCWYB2Pw/hbknBveyvfs1
5DZv49LSUnTb4+4TEV2JBQAISzALgMsNUndjbqYY/kTXl/v7wgIAhCOoBYCIbt1YAICwsAAQkZdY
AICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICw
sAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQ
kZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdY
AICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICw
sAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQ
kZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdY
AICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICw
sAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQ
kZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdY
AICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICw
sAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQ
kZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdY
AICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICw
sAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQ
kZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdY
AICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICw
sAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQ
kZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdY
AICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICw
sAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQ
kZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdY
AICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICw
sAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQ
kZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdY
AICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICw
sAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQ
kZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdY
AICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICw
sAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQkZdYAICwsAAQ
kZdYAICwsAAQkZfcE83i4qIeeughFgAgAOfOnWMBIKJ/+twTzczMjJ577rloAXBHH0S0fa2srLAA
EJGfjh8/HuWefNyTDhFtbxcuXIh+jfv7ygJARL+01tbWdObMmegJxx15ENH25v5Oxv1ddbEAEBER
pWEsAERERGkYCwAREVEaxgJARESUhrEAEBERpWG/1AXgxMqqTtkFniQiIqKgO3Xyl7gAjM6tacwu
jIiIiMJvYGZ9+H/mBcBtEURERHRztDm/b2gB6LUFYHN7ICIiopuvHuu6F4Bdu3Y3n/lQmj1l2ZmI
iIjo5mzGOispO7fwkxeAb3zjm+2ZOQW2LWRFGwMRERHdnB203PB/5NEnPnkBAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAuHl87nP/H9xARwc0HEHqAAAAAElFTkSuQmCC</Preview>
  <Form>/IBO1aISlhIAACODCAAAAAAABADVV1tzqjoUfu9M/wPDa52CeJ9pnQG8tV4Rtdv90omQQmogCqFqf/1JpD3b
XVDxoWd62hnkkpX1rfWt9SW5Gy5eoUXD+vWVINzFDwLdreC9aO5CCr3bJ+TbZBPetkjgxdeckPYp
J8xgECLi3xdvZf6fE/QI0yiA9z6MaABwThhFC4ysLtxNyBL694tKBZSsUjlfKxShXK2Jgg885vmF
zTdDoQdGbEbiQ6sBKNDJShQsF2E7YKaiTnwaEByKe+QM+yggKxjQ3cccakSJaQEMG8iDPsfFhpZz
Qr5wJ30OPWfaJzYU6y3m6ayNjhH0qYnemUFVruSEQi1/1mjArmL9WLRnzU0KAjoiIaIsOrGuMwAw
MK0AQv+s7QRuqVjfuxU+/QrcscA874QJITg5R/ONufiYoEeAfRz7M/98J+0NPq3PF5cWUUr8by+v
MQQ2K58X5JwqqGTOesQCcarzhZxQLCUSdIzhPw4zmMQ1VCnlBCVZqilEgsWDb8MtA1XOMnzPOwck
ZEY0DSHjOALYpDsMNWAtdYJJINYnQQTT7A/rhDWGtTxMwfP+zZfakOLiyF4qY2S5PBaNbL+9XgLm
izJfC7J9JhFdRfSyuuECwtqTKRDBgAGr3iqlVVJSThVcUclfVHFJyJkrr1ApMvUqFC+rvSzQ4tpL
ysrF5PehH5k0QKtvp54tHVHIPU1cyPJ6Ee0PHnAgX0eQ78SpVRgSRc6QqQcW08HMbAB/cyolXLD3
KeG54YO/LzUHsBiwMXyBLCEW/IBOeaISaERBOoxG4u/+RH9JJzDEWTIYt8Hf9GUwGwHbZnSJdS6/
zBO7Zmkcl2x4RDzsCVqFx5UxteP2+wWlelnDZerPfcP9m4SUDclh6/39cL4L/8OSO11bx7ZxGDk+
C56vd8hxz+/hGuyxQTb+l+77ob2X6DwbBMuTjfe17f4ncWFOXvbAztK81+UDejXkg2BXRzNtON7I
3bZDVPY3MKduc+qwO40/qoauzvnvS1WqufxGa9vaZNpU1V57pEtbVzP4W7wxW/j9+ordDt/YpRFs
NLzY7kz+VXPl8cyVp0rNszu2a3lT1Wq3VgvfiBbeTH5oGFHfLOZ/N+353nN39ThutqbXV8Nm7fVm
JEkjeTo31qp2U17R5o28HrxV1eJbzZD6yg3wQmmmkWFf3W3Wtfc1WhuPrQpodJdWXu2+/m7PKep0
UO/6agDm2pP2C22R0x4OJmE5fPJ0rdp2cb9TUFWn9B4qY2OyGSpGI9SXDuritdqeQav7ahfmtZY6
K4W/KrLdnDsM23jXf1Cb8nKEWrNFOOubuqZivT17UhR399ocOGq7o2B54hidiro1KtPRxsYD5Mg+
S3JRq0qPVU3tPuYHAx1cX5UX8vs+303cmizNyPB0/U76oCgjwbH2p4vF+UNVvAli4q8kJTYhsLHg
xzqbtsb8fE1NV42TmU01yZjYvMw2skpyUU1fuhrM0+lj6MfxIhVS8qTx8+k4InYn+Ui3+RZCeukL
aQoj6aBOUvJ5G9b/AffUXoSWEgAA</Form>
  <Code><![CDATA[#################################
######### CONFIGURATION #########
#################################


# LazyAdminKit information
$ApplicationName = "Visma Personec P Data Copy Tool"
$ApplicationVersion = "1.0"
$ApplicationLastUpdate = "2024/01/15"

# Author Information
$AuthorName = "Christian Damberg"
$AuthorEmail = "christian@damberg.org"
$AuthorBlogName = "Damberg Online"
$AuthorBlogURL = "http://www.Damberg.org"
$AuthorTwitter = "@DambergC"
$AuthorTwitterURL = "http://twitter.com/DambergC"

# Text to show in the Status Bar when the form load
$StatusBarStartUp = "$AuthorName - $AuthorEmail"

# Title of the MainForm
$domain = $env:userdomain.ToUpper()
$MainFormTitle = "$ApplicationName $ApplicationVersion - Last Update: $ApplicationLastUpdate - $domain\$env:username"


$formVismaPersonecDataCop_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme $formVismaPersonecDataCop -Theme Dark
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formVismaPersonecDataCop -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formVismaPersonecDataCop -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
			if ($target.ContextMenuStrip)
			{
				$Queue.Enqueue($target.ContextMenuStrip);
			}
		}
	}
}
#endregion

$ReadConfig_Click={
	#TODO: Place custom script here
	
	$file = $xmlfile
	$xml = [XML](get-content $file)
	
	$databasestest = $xml.Configuration.Test.Databases.Db
	$databasesprod = $xml.Configuration.Prod.Databases.db
	$RestorePathMDF = $xml.Configuration.Test.RestorePathMDF
	$restorepathLOG = $xml.Configuration.Test.RestorePathLOG
	$bigramPROD = $xml.Configuration.Prod.Bigram
	$bigramTEST = $xml.Configuration.Test.Bigram
	$rspdbuser = $xml.Configuration.Test.Rspdbuser
	$psutotint = $xml.Configuration.Test.Psutotint
	$SQLPROD = $xml.Configuration.Prod.Sqlserver
	$SQLTEST = $xml.Configuration.Test.Sqlserver
	$backuppathTEST = $xml.Configuration.Test.Backuppath
	$backuppathPROD = $xml.Configuration.Prod.BackuppathUNC
	$importcatalog = $xml.Configuration.Test.Importcatalog
	$exportcatalog = $xml.Configuration.test.Exportcatalog
	
	$object = New-Object -TypeName PSObject
	$object | Add-Member -MemberType NoteProperty -Name 'Bigram PROD' -Value $bigramPROD
	$object | Add-Member -MemberType NoteProperty -Name 'Bigram TEST' -Value $bigramTEST
	$object | Add-Member -MemberType NoteProperty -Name 'Rspdbuser' -Value $rspdbuser
	
	$result =$object | out-string
	
	s
	Add-RichTextBox -text $xml

}



]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>