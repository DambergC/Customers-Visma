<File version="3.2">
  <FileID>1aa96548-52fd-4d66-84e4-fc04f0bd13ce</FileID>
  <Preview>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
JSampqKxeX/s3NWarraPpavt9MF/12OVPe5Pe91HuW3tdlfTB/d89HT1R8/cmfRc8vDP/9BPRmd7
fwyuXoyVU2X33f7y9j7u2z7o9pL0+beWBlz+qf0dzSPFUB1fSuU/P0UT+Xvps+vxfNNIMXSbuuei
rW8+Jpfzb6mV3+fjlI+Tj5ePm4+fHyc/3nj++YD09rHFjVt/bt2+9vfbb1vY9vLCO7fNf689Rj4f
+bzk81M7V3nxOPtxF4Bim0mf7Le3kq6AV9JW8kGt5j9L7vs3ozRo05/5PCznq971C+mK+KWt9z2/
7n23r1d38rElqb7lz7er6aKre/xI7GgZi11tE7Gr9dO3MzU8v5kGaLrSTlfWjQfnYuf+8dLbftzy
cfLx8nHz8fPj5Mcr3p6ff63ay7W3vfftP6V8HvL5yOdl+zzKX004dy0++gJw5vKr6coyD/Q88NOB
0sHyVWb+sn41y1/aKXldvurPve9tn39bX256/+u2v6wKl//3Kv0NbetbyGkJOHMjDp27GYfO3oy1
T1k+Ri7Pvnz8/Pl17Ww6/rbbfJq2jnOjOG4+fn6c2mOW3f7jlo+zembruefPAbfnd+rcjY+4AHzx
1gKwevrGrU3iWhw5ez02X7wex89djROftPPXdAfauNOlfzeqf/l/r3e0Czd0Bzp5p7t4U3egU9vK
P8O3fv5GMbuLGZ5KL37UBeCL71oA8peXT6UDvvbKzbh65aW4dvXKJ+r6tat3tBvXr1Wymzeu39Fe
vnnjjvXKyzcr26uvvHxHe+3VV+5or7/2aiV74/XX72hvvvnGHevtt96sbOn/vFO8HS9df3XrKyTb
F4CHHv1kC8DJiy8Xn1ReeumluHLlyifq6tWrd7Rr165VsuvXr9/Rbty4cce6efNmZXv55ZfvaK+8
8sod7dVXX61kr7322h3t9bQE3KneeOONv5Hl5eatN9+8XX75/bfJr98qLwGXrlkA3lXZcKxCZUO5
npUN5npVNhirUtlQrmdlQ7melQ3HKlQ2lOtZ2WCuV+8dind7b+Ur+3iruMLPf68Vb28N+e2LgAXg
QyobjlWobCjXs7LBXK/KBmNVKhvK9axsKNezsuFYhcqGcj0rG8z1avvwvNvbutJ/s/i5u0cPrMSX
nxyLe340Gn/01Hg8338kzl1OEz0tA7UlwALwIZUNxypUNpTrWdlgrldlg7EqlQ3lelY2lOtZ2XCs
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
gKr6uZ/7zzo4rUj76zuCAAAAAElFTkSuQmCC</Preview>
  <Form>U9T81xVXbw4AACODCAAAAAAABADVVttu4joUfUfiH6K8FjUXoIBEkZwQQsstISEd5mUUEjcx5EYu5fL1YwM9
hxkC4aVHPa1k7Njbe++1vJfdniyW0EqTTrlEUe3jgEp3EXymtV2SQv/xDQV2uEkee2HsH9sKlTdV
oQwYJygMnmuPLPmvUGLmpVkMnwOYpbHpVSglW3jIGsCdHq5g8LxoNMy6VX/iWtUaZJstmgpMH3t+
x/speLMwgJYyi5zYtKGWRRFNWS7y7Bib0mIYpHHoJfQhchy7EocRjNPdaQ+QpaFmmR7sIh8GJC68
9KlCcdU287m0yHQU2pDu9LCnQhvRQzBINbTHBg0O515la4VGY9zSnWvZFpprqRmnSpigFGdHd0Qc
AIw1K4YwKLTV4TalO59uKYU6OaaI5zBO9TD0LjeRPrCP0w7D0LSvB/+LTLeZg8GndfHpGsEg09IY
RV9+xPCZyBLiSXchJuHGwbrE7sU3HUgOCAqcI+M8joRnL/DKMcU5ne2MF5AvtyAhRBwgIdiQxV8H
zVlYOLApfIcYEAueQk8JUBfR0BRzng1Dvv2bfTEgw9Ayj8cXR3wPgsea+ZO+O8wU07YxXXSnjpnC
nnB7h5XmhhuSEUlbRxFmTo+ze9ydCQHfvGO9bi5eAhtu6Q53KRvXqvcfELjLSmWOxXaU9T8GxVX4
Hx6522frmj57yAlw8hiCKXLcYnHu4mE33AR/Vd83rb2LyrPNeHWz8P4uu/9JXh4h7/7ECmk+6PIZ
vQIKzHjXQYYwmW7YgeyEAP+NtZkrzRzcE8gQqCKYk9/3JtNySUeQbUGfSQAMZUVktq6gkq/eRut5
+3IJdycfuOnGG8FbbHcamRVcdmq47Ixv+Xbfdi1/Biy5Fy0CNVv4BvvSVbORVuN+Svb84HkQvU6l
3qxcmkit5YPCMAo7m6trIDw8Ran0wK7HH01Q+2ipzIh/MP2EMYRwMgK7zbq1X6O1+tprmN3ByuLA
YPlTnqeo30fDcmlszoU34QfaIkeejPXkKXnzRaEpu96oXwXAqe8TfqrqmwmvdhNx5aCBtwayAa3B
0q7OWz1g1JMfDdaW5g6ObbobvQCJXSmoZywSY6SJAvBE2XjjeXe3lMYOkPu8x+qO2m+ArdqYKRvb
GyOHDTDINaHJvDYFMHjlxmPRLJeeFuz+gLfk9fSVlqm+KLaZE0V3EnzU/nyxKH4tHSS5isWfL36Z
nQT/qLN5d8z319R81biJbK7JncByLIeRvbxU86+uLvZ0+3mJH9TW6kpIvw6T56/L70/HFbG7yUe+
zZcQMsy/SHMYyQ/qJiWf3aTzGyREwoJvDgAA</Form>
  <Code><![CDATA[
$formPersonecPUpgradeSupp_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme $formPersonecPUpgradeSupp -Theme Dark
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formPersonecPUpgradeSupp -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formPersonecPUpgradeSupp -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>