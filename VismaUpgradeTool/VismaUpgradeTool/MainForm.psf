<File version="3.2">
  <FileID>bc1da008-de28-4aa2-b55f-2424a62f1ded</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAACosSURBVHhe7d1ZcJ33ed9xZ+L4Ip3e9qKdaX2R
duqZ3rSxmzh2mmlSN8k0M209k07iTJumjmRPpm28SLJNStS+OvWiXZQocSeIfd+3c7Dv+8G+kgBB
giBIcF+kX5//C0ACoL8YiiZeEP5/v5NPaB6c8x4cAIPneQ8OqM8QERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERH90pYw
E7/2a7828cUv/ubEA998YOLBB79lHpx48AEAAHBfs5n97W9/e+KP/+gPJz772c9O/Mqv/MqEzfXR
aMLfrl/91V+d+/znP69vfOMb+tkrb6ixfUAj0wsanjqj4cnTAADgfja1oNTYrHIKivWtb31LX/jC
F/S5z31Oq2P+k3Obghv+BaU1ahs+pdruCdV0jq/oAgAA97XVmd0ydErNHQP627/9jn79H/z6zdUx
/8l98Td/c+Lvfvqq2kfm7QBjqgUAADtOdcdoNMvziiv1tT/4g79/AfjmNx+YaGwbULJnSgnbJAAA
wM5U1TGmsdkl7dnz5N+/AHzrwW9NTNqVEz2TSnRPAACAHaq6c1wnFq7osceeuNMFYDF6BiBpNwYA
YKvV2UnnVovz/tbf13bc3xr3WoDp05f06KN77nQBOKf6vhnV904BALClGvqc6S330f35336vbdf9
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
AAAAAsQCAABAgFgAAAAIEAsAAAABYgEAACBALAAAAASIBQAAgACxAAAAECAWAAAAAsQCAABAgFgA
AAAIEAsAAAABYgEAACBALAAAAASIBQAAgACxAAAAECAWAAAAAsQCAABAgFgAAAAIEAsAAAABYgEA
ACBALAAAAASIBQAAgACxAAAAECAWAAAAAsQCAABAgFgAAAAIEAsAAAABYgEAACBALAAAAASIBQAA
gACxAAAAECAWAAAAAsQCAABAgFgAAAAIEAsAAAABYgEAACBALAAAAASIBQAAgACxAAAAECAWAAAA
AsQCAABAgFgAAAAIEAsAAAABYgEAACBALAAAAASIBQAAgACxAAAAECAWAAAAAsQCAABAgFgAAAAI
EAsAAAABYgEAACBALAAAAASIBQAAgACxAAAAECAWAAAAAsQCAABAgFgAAAAIEAsAAAABYgEAACBA
LAAAAASIBQAAgACxAAAAECAWAAAAAsQCAABAgFgAAAAIEAsAAAABYgEAACBALAAAAASIBQAAgACx
AAAAECAWAAAAAsQCAABAgFgAAAAIEAsAAAABYgEAACBALAAAAASIBQAAgACxAAAAECAWAAAAAsQC
AABAgFgAAAAIEAsAAAABYgEAACBALAAAAASIBQAAgACxAAAAECAWAAAAAsQCAABAgFgAAAAIEAsA
AAABYgEAACBALAAAAASIBQAAgACxAAAAECAWAAAAAsQCAABAgFgAAAAIEAsAAAABYgEAACBALAAA
AASIBQAAgACxAAAAECAWAAAAAsQCAABAgFgAAAAIEAsAAAABYgEAACBALAAAAASIBQAAgACxAAAA
ECAWAAAAAsQCAABAgFgAAAAIEAsAAAABYgEAACBALAAAAASIBQAAgACxAAAAECAWAAAAAsQCAABA
gFgAAAAIEAsAAAABYgEAACBALAAAAASIBQAAgACxAAAAECAWAAAAAsQCAABAgFgAAAAIEAsAAAAB
YgEAACBALAAAAASIBQAAgACxAAAAECAWAAAAAsQCAABAgFgAAAAIEAsAAAABYgEAACBALAAAAASI
BQAAgACxAAAAECAWAAAAAsQCAABAgFgAAAAIEAsAAAABYgEAACBALAAAAASIBQAAgACxAAAAECAW
AAAAAsQCAABAgFgAAAAIEAsAAAABYgEAACBALAAAAASIBQAAgACxAAAAECAWAAAAAsQCAABAgFgA
AAAIEAsAAAABYgEAACBALAAAAASIBQAAgACxAAAAECAWAAAAAsQCAABAgFgAAAAIEAsAAAABYgEA
ACBALAAAAASIBQAAgACxAAAAECAWAAAAAsQCAABAgFgAAAAIEAsAAAABYgEAACBALAAAAASIBQAA
gACxAAAAECAWAAAAAsQCAABAgFgAAAAIEAsAAAABYgEAACBALAAAAASIBQAAgACxAAAAECAWAAAA
AsQCAABAgFgAAAAIEAsAAAABYgEAACBALAAAAASIBQAAgACxAAAAECAWAAAAAsQCAABAgFgAAAAI
EAsAAAABYgEAACBALAAAAASIBQAAgACxAAAAECAWAAAAAsQCAABAgFgAAAAIEAsAAAABYgEAACBA
LAAAAASIBQAAgACxAAAAECAWAAAAAsQCAABAgFgAAAAI0JYtADO2AFxaXrkDAABwf3Ezeu7sPV4A
Unaw8VMXdMoOPGfbBQAAuL+4GT05fyGa2fdsAVg7iNsqAADA/Wn98F+b3b/wAgAAAHYWFgAAAAJ0
FwvAJQ3ZAuBuCAAAdqYBs7D8wZ0tAH/91w9Mn7/8vhYvS2dsawAAADvVB7oh6dFH92h1zH9yX//6
10d3P7rn1u7dj97atQsAAOxkjz32+K0/+/M/v7Y65omIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiH6p+sxn/j9g0xOW
riArBQAAAABJRU5ErkJggg==</Preview>
  <Form>m2t+1o6qExAAACODCAAAAAAABADVV1lzokwUfbfK/0DxGisg7lXGKkBc4oogGedliqUDrUArS1x+/dctyXxm
JEIeMpXRKuym+3DvPefe29KeGWtgRmGnWKCodjKhouMWPNDKMYyAd/8EfQvtw/seCrzkWqLSlkqU
BoIQIv+hes+Sb4kSYzeKA/DggzgKdLdEzWPDheYIHFW0Af6D0WjoNbNWL7cqVcA2WzTl6x62/Iyf
p8HQ05dbO9AtoCLk0pTpQNcKMIwWkR8FyA3ps9fY73mAtiCIjq94Po6QYuou6EIP+MQnvLVeosqV
NvO2NQs6QRagOz1sKRMjuhD4kQJPGFBnuRJVqbcyQVN8pTtpkWZClUgPojkKYYQjozsiNg4CxQwA
8DOxKjhEdCfbpPSCn/qKGSPdSnf1F1lqM+fNb8jsHBKRZyABHb48j0xiyECH8q3kueaIuKFHEfRt
ydcNF+Dg1SAGVyRdI8fI1BNRyjgNqo0ckCQPfnuaA5EkWrneKFFcnv2qbgx9CxwwpnYtNJPolV+9
CfBjJQrg9svlw7Ubh8SS6gBM0qc0HHq6DUghYxUTwjjsCcfm4GuIY7p4Mt5A7tyihJTCmRLCDdn8
ddRcuIUdW4BngAkxwavrESHqyhuaYi6jYci9/6P/TFZjj/MwmOT0e/lywOa6ZWG56E4NK4Ut4Wue
cnDQnkREwlbhNsxdrBcNm2t+ro6qebafO+1vEq4r9V3pvZ9kV+FfTLnbufXROepC28fBYwoW0Hay
D9EunnbR3v+j+r5p7V1VnqUHm5uF92fZ/SNxuUS8/IFlynzuyxfyCtDXg2MHasJssWdHfRvx+DNV
lo60tPFIIFNeFvkV+X1uMi2HDIS+JahLiefH/bnIHBxBJnfdvdJzT8UCHs5e8KUb7AXXOBwVsio4
7EJz2CXX8qyB5Zjekjf7va3hy7HhaeywK8cTpVr+KVmrs+XR9nEh9ZbFwkxqre/mDDNnlyt5xwt3
9W0k3bG76UuTr760ZGbC3eleyGgCmk34437XOu3gTn7sNfTuaGOW+dH6Z38VwcEAjouFqb4SnoQf
8ADt/myqhvXwyROFZt9xJ4MKz9u1U8gtZHU/4+RuKG5sOHJ3fF8D5mhtVVatHq/Vwh8N1pJWNvZt
cZwMeYndzGFPM0JtoogC74p97YnjnONamtp8f8C5rGrLgwZ/kBvL+d5yp9BmfUxyVWgyj02BHz2W
p1NRLxbqBns68y25PXWjxLInim3mVaKcAie9P71ZZP+zPbfkCunI1y32qsEmDT/ps2lnzPfvqeld
4yazqZCcxJZrhNnrQzX96OpiS7dfDPCLj7n5wKVf58XLd4PvL8cHze6mHumYLxFknH6QpiiS7tRN
Sd6GYec/D2JkKBMQAAA=</Form>
  <Code><![CDATA[
$formVismaUpgradeTool_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme $formVismaUpgradeTool -Theme Dark
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formVismaUpgradeTool -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formVismaUpgradeTool -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}


#endregion
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>